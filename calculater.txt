<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Professional Calculator</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.2/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
        }

        .calculator-container {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
            padding: 30px;
            max-width: 400px;
            width: 100%;
            backdrop-filter: blur(10px);
        }

        .calculator-header {
            text-align: center;
            margin-bottom: 25px;
        }

        .calculator-header h1 {
            color: #667eea;
            font-size: 28px;
            font-weight: 700;
            margin-bottom: 5px;
        }

        .calculator-header p {
            color: #6c757d;
            font-size: 14px;
        }

        .display-container {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: inset 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        .display {
            background: rgba(255, 255, 255, 0.2);
            border: none;
            border-radius: 10px;
            color: #fff;
            font-size: 32px;
            font-weight: 600;
            text-align: right;
            padding: 15px;
            width: 100%;
            outline: none;
            letter-spacing: 1px;
        }

        .display::placeholder {
            color: rgba(255, 255, 255, 0.5);
        }

        .history-display {
            color: rgba(255, 255, 255, 0.7);
            font-size: 14px;
            text-align: right;
            margin-bottom: 10px;
            min-height: 20px;
            padding: 0 5px;
        }

        .button-grid {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 12px;
        }

        .btn-calc {
            border: none;
            border-radius: 12px;
            font-size: 20px;
            font-weight: 600;
            padding: 20px;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }

        .btn-calc:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.15);
        }

        .btn-calc:active {
            transform: translateY(0);
        }

        .btn-number {
            background: #fff;
            color: #333;
        }

        .btn-number:hover {
            background: #f8f9fa;
        }

        .btn-operator {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: #fff;
        }

        .btn-operator:hover {
            background: linear-gradient(135deg, #764ba2 0%, #667eea 100%);
        }

        .btn-clear {
            background: #ff6b6b;
            color: #fff;
        }

        .btn-clear:hover {
            background: #ff5252;
        }

        .btn-equals {
            background: linear-gradient(135deg, #56ab2f 0%, #a8e063 100%);
            color: #fff;
            grid-column: span 2;
        }

        .btn-equals:hover {
            background: linear-gradient(135deg, #a8e063 0%, #56ab2f 100%);
        }

        .error-message {
            color: #ff6b6b;
            font-size: 14px;
            text-align: center;
            margin-top: 10px;
            min-height: 20px;
        }

        @media (max-width: 480px) {
            .calculator-container {
                padding: 20px;
            }

            .display {
                font-size: 24px;
            }

            .btn-calc {
                padding: 15px;
                font-size: 18px;
            }
        }

        .pulse {
            animation: pulse 0.3s ease;
        }

        @keyframes pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(0.95); }
        }
    </style>
</head>
<body>
    <div class="calculator-container">
        <div class="calculator-header">
            <h1><i class="fas fa-calculator"></i> Calculator</h1>
            <p>Professional Scientific Calculator</p>
        </div>

        <div class="display-container">
            <div class="history-display" id="history"></div>
            <input type="text" class="display" id="display" placeholder="0" readonly>
        </div>

        <div class="error-message" id="errorMsg"></div>

        <div class="button-grid">
            <button class="btn-calc btn-clear" onclick="clearAll()">AC</button>
            <button class="btn-calc btn-clear" onclick="clearEntry()">CE</button>
            <button class="btn-calc btn-operator" onclick="deleteChar()"><i class="fas fa-backspace"></i></button>
            <button class="btn-calc btn-operator" onclick="appendOperator('/')">÷</button>

            <button class="btn-calc btn-number" onclick="appendNumber('7')">7</button>
            <button class="btn-calc btn-number" onclick="appendNumber('8')">8</button>
            <button class="btn-calc btn-number" onclick="appendNumber('9')">9</button>
            <button class="btn-calc btn-operator" onclick="appendOperator('*')">×</button>

            <button class="btn-calc btn-number" onclick="appendNumber('4')">4</button>
            <button class="btn-calc btn-number" onclick="appendNumber('5')">5</button>
            <button class="btn-calc btn-number" onclick="appendNumber('6')">6</button>
            <button class="btn-calc btn-operator" onclick="appendOperator('-')">−</button>

            <button class="btn-calc btn-number" onclick="appendNumber('1')">1</button>
            <button class="btn-calc btn-number" onclick="appendNumber('2')">2</button>
            <button class="btn-calc btn-number" onclick="appendNumber('3')">3</button>
            <button class="btn-calc btn-operator" onclick="appendOperator('+')">+</button>

            <button class="btn-calc btn-number" onclick="appendNumber('0')">0</button>
            <button class="btn-calc btn-number" onclick="appendNumber('.')">.</button>
            <button class="btn-calc btn-equals" onclick="calculate()">=</button>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.2/js/bootstrap.bundle.min.js"></script>
    <script>
        // Calculator state
        let currentInput = '';
        let previousInput = '';
        let operator = null;
        let shouldResetDisplay = false;

        // DOM elements
        const display = document.getElementById('display');
        const history = document.getElementById('history');
        const errorMsg = document.getElementById('errorMsg');

        // Initialize
        updateDisplay();

        // Keyboard support
        document.addEventListener('keydown', handleKeyPress);

        function handleKeyPress(e) {
            if (e.key >= '0' && e.key <= '9') {
                appendNumber(e.key);
            } else if (e.key === '.') {
                appendNumber('.');
            } else if (e.key === '+' || e.key === '-' || e.key === '*' || e.key === '/') {
                appendOperator(e.key);
            } else if (e.key === 'Enter' || e.key === '=') {
                e.preventDefault();
                calculate();
            } else if (e.key === 'Escape') {
                clearAll();
            } else if (e.key === 'Backspace') {
                deleteChar();
            }
        }

        function appendNumber(num) {
            clearError();
            
            if (shouldResetDisplay) {
                currentInput = '';
                shouldResetDisplay = false;
            }

            // Prevent multiple decimals
            if (num === '.' && currentInput.includes('.')) {
                showError('Only one decimal point allowed');
                return;
            }

            // Prevent leading zeros
            if (currentInput === '0' && num !== '.') {
                currentInput = num;
            } else if (currentInput.length < 15) {
                currentInput += num;
            }

            updateDisplay();
            addPulseEffect(event.target);
        }

        function appendOperator(op) {
            clearError();

            if (currentInput === '' && previousInput === '') {
                showError('Enter a number first');
                return;
            }

            if (currentInput === '' && operator !== null) {
                operator = op;
                updateHistory();
                return;
            }

            if (previousInput !== '' && currentInput !== '') {
                calculate();
            }

            operator = op;
            previousInput = currentInput || previousInput;
            currentInput = '';
            shouldResetDisplay = false;
            updateHistory();
            addPulseEffect(event.target);
        }

        function calculate() {
            clearError();

            if (previousInput === '' || currentInput === '' || operator === null) {
                showError('Incomplete operation');
                return;
            }

            const prev = parseFloat(previousInput);
            const current = parseFloat(currentInput);
            let result;

            try {
                switch (operator) {
                    case '+':
                        result = prev + current;
                        break;
                    case '-':
                        result = prev - current;
                        break;
                    case '*':
                        result = prev * current;
                        break;
                    case '/':
                        if (current === 0) {
                            throw new Error('Cannot divide by zero');
                        }
                        result = prev / current;
                        break;
                    default:
                        return;
                }

                // Round to 10 decimal places to avoid floating point errors
                result = Math.round(result * 10000000000) / 10000000000;

                // Update history with full equation
                history.textContent = ${previousInput} ${getOperatorSymbol(operator)} ${currentInput} =;

                currentInput = result.toString();
                previousInput = '';
                operator = null;
                shouldResetDisplay = true;
                updateDisplay();
                addPulseEffect(event.target);

            } catch (error) {
                showError(error.message);
                clearAll();
            }
        }

        function clearAll() {
            currentInput = '';
            previousInput = '';
            operator = null;
            shouldResetDisplay = false;
            updateDisplay();
            history.textContent = '';
            clearError();
            addPulseEffect(event.target);
        }

        function clearEntry() {
            currentInput = '';
            updateDisplay();
            clearError();
            addPulseEffect(event.target);
        }

        function deleteChar() {
            if (currentInput.length > 0) {
                currentInput = currentInput.slice(0, -1);
                updateDisplay();
                clearError();
            }
            if (event && event.target) {
                addPulseEffect(event.target);
            }
        }

        function updateDisplay() {
            display.value = currentInput || '0';
        }

        function updateHistory() {
            if (previousInput && operator) {
                history.textContent = ${previousInput} ${getOperatorSymbol(operator)};
            } else {
                history.textContent = '';
            }
        }

        function getOperatorSymbol(op) {
            const symbols = {
                '+': '+',
                '-': '−',
                '*': '×',
                '/': '÷'
            };
            return symbols[op] || op;
        }

        function showError(message) {
            errorMsg.textContent = message;
            setTimeout(clearError, 3000);
        }

        function clearError() {
            errorMsg.textContent = '';
        }

        function addPulseEffect(element) {
            if (element) {
                element.classList.add('pulse');
                setTimeout(() => element.classList.remove('pulse'), 300);
            }
        }
    </script>
</body>
</html>